version: 2.1
orbs: 
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowID:
        type: string
      jobName: 
        type: string
    steps:
      - slack/notify:
          event: fail
          custom: |
            {"blocks": [{
              "type": "section",
              "fields": [{
                  "type": "plain_text",
                  "text": "${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH};${CIRCLE_JOB}\nInfrastructure <<parameters.jobName>> Failure.",
                  "emoji": true
                }]}]}
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflowID>>
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflowID>>
  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflowID:
        type: string
    steps:
      - run:
          name: Revert migrations
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS=$(curl --insecure  https://kvdb.io/Q7w7K5Nzdf7KZ2BhSYhLRC/migration_<<parameters.workflowID>>)
            if(( $SUCCESS==1 )); 
            then
             cd ~/project/backend
             npm install
            #  Add revert code here. You can find this in the Getting Started section.
             npm run migration:revert
            fi
          when: on_fail
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
              cd frontend
              npm install
              npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          custom: |
            {"blocks": [{
              "type": "section",
              "fields": [{
                  "type": "plain_text",
                  "text": "${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH};${CIRCLE_JOB}\nfrontend package auditing failure",
                  "emoji": true
                }]}]}
                
          
  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
          
  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: test frontend
          command: |
            cd frontend
            npm install
            npm run test


  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: test backend
          command: |
            cd backend
            npm install
            npm run test            

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: audit front end
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          custom: |
            {"blocks": [{
              "type": "section",
              "fields": [{
                  "type": "plain_text",
                  "text": "${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH};${CIRCLE_JOB}\nfrontend package auditing failure",
                  "emoji": true
                }]}]}
            
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: audit back end
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          custom: |
            {"blocks": [{
              "type": "section",
              "fields": [{
                  "type": "plain_text",
                  "text": "${CIRCLE_PROJECT_REPONAME}:${CIRCLE_BRANCH};${CIRCLE_JOB}\nfrontend package auditing failure",
                  "emoji": true
                }]}]}
                
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: install tar and gzip
          command: yum install tar gzip -y
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=UdaPeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=UdaPeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
            workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
            jobName: Deployment

  configure-infrastructure:
    docker:
      - image: python:3.7.13-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ["0f:5d:f5:4a:43:8a:e9:e6:fe:b1:52:4f:dc:09:b6:82"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --upgrade ansible openssh tar gzip py3-pip
            pip3 install awscli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/configure-server.yml
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
          jobName: Configuration
          
  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout 
      - restore_cache:
          keys: [backend-scan]
      - run:
          name: Installs aws-cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
            cd /tmp/
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: install node packages
          command: |
            cd backend
            npm install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm run migrations | tee migrations_dump.txt
      - run: cat ~/project/backend/migrations_dump.txt
      - run:
          name: Send migration results to kvdb
          command: |   
            if (grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt || grep -q "No migrations are pending" ~/project/backend/migrations_dump.txt)
            then
            # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
            curl --insecure https://kvdb.io/Q7w7K5Nzdf7KZ2BhSYhLRC/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            else
            curl --insecure https://kvdb.io/Q7w7K5Nzdf7KZ2BhSYhLRC/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '0'
            fi
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
          jobName: Migration

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [frontend-scan]
      - run: 
          name: install awscli 
          command: |
            sudo apt-get update
            sudo apt-get install -y python-pip
            sudo pip install --upgrade awscli
      - run:
          name: Install dependencies
          command: |
            cd frontend
            sudo npm install webpack-dev-server -g
            sudo npm install
      - run:
          name: Get backend url
          command: |
            # your code here
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL >> frontend/.env
            echo "${API_URL}"
      - run:
          name: install node packages
          command: |
            cd frontend
            npm install
      - run:
          name: build production frontend
          command: |
            cd frontend
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            npm run build:prod
      - run:
          name: create artifact
          command: |
            cd frontend
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
      - run:
          name: put data in bucket
          command: |
            # your code here
            cd frontend
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      - restore_cache:
          keys: [scan-backend]
      - run: 
          name: install awscli 
          command: |
            sudo apt-get update
            sudo apt-get install -y python3 python3-pip
            sudo pip3 install --upgrade awscli
      - run: 
          name: install ansible
          command: |
            sudo apt-get update
            sudo apt-get install -y ansible openssh-server
      - run:
          name: install tar and gzip
          command: |
            sudo apt-get update
            sudo apt-get install tar gzip
      # Add ssh keys with fingerprint
      - add_ssh_keys: 
          fingerprints: ["bf:ec:ad:0d:27:83:8c:48:f0:c3:5e:21:32:c4:42:46"]
      # attach workspace
      - attach_workspace:
          at: ~/
      - run:
          name: echo working dir
          command: pwd
      - run:
          name: install packages
          command: |
            cd backend
            npm install
      - run:
          name: build packages
          command: |
            cd backend
            npm run build
      - run:
          name: archive directory
          command: tar -C backend -czvf artifact.tar.gz .
      - run:
          name: inventory content
          command: |
            cd .circleci/ansible
            cat inventory.txt
      -  run:
          name: move backend to ansible
          command: mv artifact.tar.gz .circleci/ansible/roles/deploy/files/
      - run:
          name: run ansible playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      # Here's where you will add some code to rollback on failure  
      - destroy-environment:
          workflowID: ${CIRCLE_WORKFLOW_ID:0:7}
          jobName: Backend Deployment

  smoke-test:
    docker:
      - image:  python:3.7.13-alpine3.16
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            apk add --upgrade curl aws-cli
      - run:
          name: delay the next command for 15 seconds
          command: sleep 15
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" --query 'Reservations[*].Instances[*].PublicIpAddress' --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            if curl --ipv4 --insecure --retry 10 -v "${API_URL}/api/status" | grep "ok"
            then
                exit 1
            else
                exit 1
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
           requires: [build-frontend]
      - test-backend:
           requires: [build-backend]
      - scan-backend:
           requires: [build-backend]
      - scan-frontend:
           requires: [build-frontend]
      - deploy-infrastructure:
           requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          #  filters:
          #    branches:
          #      only: [test-feature-branch]
      - configure-infrastructure:
           requires: [deploy-infrastructure]
      - run-migrations:
           requires: [configure-infrastructure]
      - deploy-frontend:
           requires: [run-migrations]
      - deploy-backend:
           requires: [run-migrations]
      - smoke-test:
           requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]